plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "whocosmetics.common.mixins.json"
        mixinConfig "whocosmetics.mixins.json"

        dataGen {
            mod "whocosmetics"
        }
    }

    runs {
        data {
            programArgs "--existing", project(":common").file("src/main/resources/").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    // Tardis Refined
    modImplementation "maven.modrinth:tardis-refined:${tardis_refined_version_forge}"
}

unifiedPublishing {
    project {
        displayName = "[Forge] Doctor Who: Deco - $project.version"
        releaseType = "release"
        changelog = new File("${rootProject.projectDir}/changelog.md").text
        gameVersions = ["1.20.1"]
        mainPublication tasks.remapJar
        gameLoaders = ["forge"]
        relations {

        }

        var CURSE_API_KEY = project.findProperty("curseforge") ?: System.getenv("curseforge")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = "401678"
                gameVersions.addAll "Java 17", "1.20.1"
            }
        }

        var MODRINTH_TOKEN = project.findProperty("modrinth") ?: System.getenv("modrinth")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = "Ec3Ed3oz"
                version = "forge-$project.version"
            }
        }
    }
}


dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modImplementation "dev.jeryn:neoforgetr:2.1.1"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "whocosmetics.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = project.archives_base_name + "-forge"
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url = project.findProperty("maven_repo_url") ?: "https://maven.craig.software/repository/whocraft/"
            credentials {
                username = project.findProperty("MAVEN_REPO_USERNAME") ?: System.getenv("MAVEN_REPO_USERNAME") ?: ""
                password = project.findProperty("MAVEN_REPO_PASSWORD") ?: System.getenv("MAVEN_REPO_PASSWORD") ?: ""
            }
        }
    }
}
